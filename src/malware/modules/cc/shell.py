from threading import Event
from ..client import Client
from time import sleep
import time

def print_status(client, timeout_sec=15):
    output = ""
    timeout = time.time() + timeout_sec
    while not client.get_stdout_queue().empty() or time.time() < timeout:
        sleep(3)
        if not client.get_stdout_queue().empty():
            msg = client.get_stdout_queue().get()
            if msg != '_EOF_':
                if 'END' == msg:
                    return
                output += msg    
                timeout = time.time() + timeout_sec
            else:
                #print(f'-: {client.get_stdout_queue().qsize()}')
                print(output)
                msg = ""
                output = "" 
    print("Open CMD Input...") 
    return 


def cmd(client, timeout_sec=15):
    cmd = ''
    while cmd != 'exit':
        output = ">> "
        msg = ''
        timeout = time.time() + timeout_sec
        while not client.get_stdout_queue().empty() or time.time() < timeout:
            sleep(0.1)
            if not client.get_stdout_queue().empty():
                #print(f'Get Packet QS: {client.get_stdout_queue().qsize()}')
                msg = client.get_stdout_queue().get()
                if msg != '_EOF_':
                    output += msg      
                    timeout = time.time() + timeout_sec
                else:
                    break
        print(output)
        cmd = input('$ ')
        if cmd:
            client.get_stdin_queue().put(cmd) # send cmd
            
def shell_main(clients, client_list_lock, shutdown_signal: Event):
    while True:
        sleep(2)
        if shutdown_signal.is_set():
            return
        for name,client in clients.items():
            print("Use Target: "+name)
            print_status(client)
            cmd(client)
        
