from threading import Event
from ..client import Client
from time import sleep

def cmd(client):
    cmd = ''
    while cmd != 'exit':
        sleep(2)
        cmd = input('$ ')
        if cmd:
            print(f'Q SIZE: {client.get_stdout_queue().qsize()}')
            client.get_stdout_queue().get() # first packet
            print(f'Q SIZE: {client.get_stdout_queue().qsize()}')
            
            client.get_stdin_queue().put(cmd)
            sleep(3)

            print(f'Q SIZE: {client.get_stdout_queue().qsize()}')
            client.get_stdin_queue().put('')
            sleep(3)

            print(f'Q SIZE: {client.get_stdout_queue().qsize()}')
            client.get_stdin_queue().put('')
            sleep(3)

            print(f'Q SIZE: {client.get_stdout_queue().qsize()}')

            output = ""  
            for e in list(client.get_stdout_queue().queue):
                if e == 'X':
                    client.get_stdout_queue().get()
                    
                else:
                    output += client.get_stdout_queue().get()
            print(">> "+ output)



            #print('>>', client.get_stdout_queue().get())
            #for job in iter(client.get_stdout_queue().get()):
            #    print(f'>> {job}')
            #    client.get_stdout_queue().get()
            #print(f'>> {client.get_stdout_queue().get()}')
            #print(f'>> {client.get_stdout_queue().get()}')
            # print(client.get_stdin_queue().qsize())
            #while client.get_stdin_queue().empty():
                #print(client.get_stdin_queue().qsize())
                #print('>>', client.get_stdout_queue().get())
                #print(f'Q SIZE: {client.get_stdin_queue().qsize()}')

            
    print("Exit ...")
            
def shell_main(clients, client_list_lock, shutdown_signal: Event):
    while True:
        
        sleep(2)
        if shutdown_signal.is_set():
            return
        for name,client in clients.items():
            print("Use Target: "+name)
            cmd(client)
        
