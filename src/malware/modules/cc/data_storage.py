from os.path import join, isdir
from io import BufferedReader
from typing import TypedDict
from os import mkdir, getcwd
from threading import Event
from ntpath import join
from queue import Queue
from time import sleep
import logging

from ..client import Client

class File(TypedDict):
    filename: str
    data: BufferedReader

def store_data_main(clients: dict, shutdown_signal: Event, sec: int = 2, storage = getcwd()):
    while True:
        sleep(sec)
        for client in clients.keys():
            while clients[client].get_file_queue().qsize():
                sleep(0.2)
                if isdir(client) == False:
                    mkdir(client)
                
                queue = clients[client].get_file_queue().get()
                logging.debug(f"QUEUE{queue}")
                filename, hashvalue = queue['file'].rsplit(" ")

                logging.debug(f"filename {filename}, hashv {hashvalue}")

                data = bytes(queue['data'], 'ISO-8859-1')
                logging.debug( f"WRITE DATA: {data}" )
                with open(join(storage, client, filename), "ab") as f:
                    if data != b'_EOF_':
                        f.write(data)

        if shutdown_signal.is_set():
            return


