#!/usr/bin/python3
from sys import getsizeof
from Cryptodome.Cipher import AES, PKCS1_OAEP
from Cryptodome.PublicKey import RSA
from Cryptodome.Random import get_random_bytes
from io import BytesIO
import base64
import zlib

def decrypt(encrypted):
    encrypted_bytes = BytesIO(base64.decodebytes(encrypted))
    cipher_rsa, keysize_in_bytes = get_rsa_cipher(key_priv)
    encrypted_session_key = encrypted_bytes.read(keysize_in_bytes)
    nonce = encrypted_bytes.read(16)
    tag = encrypted_bytes.read(16)
    ciphertext = encrypted_bytes.read()
    session_key = cipher_rsa.decrypt(encrypted_session_key)
    cipher_aes = AES.new(session_key, AES.MODE_EAX, nonce)
    decrypted = cipher_aes.decrypt_and_verify(ciphertext, tag)
    plaintext = zlib.decompress(decrypted)
    return plaintext

def encrypt(plaintext):
    compressed_text = zlib.compress(plaintext)
    session_key = get_random_bytes(16)
    cipher_aes = AES.new(session_key, AES.MODE_EAX)
    ciphertext, tag = cipher_aes.encrypt_and_digest(compressed_text)
    cipher_rsa, _ = get_rsa_cipher(key_pub)
    encrypted_session_key = cipher_rsa.encrypt(session_key)
    msg_payload = encrypted_session_key + cipher_aes.nonce + tag + ciphertext
    encrypted = base64.encodebytes(msg_payload)
    return(encrypted)

# crate rsa object and byte size
def get_rsa_cipher(key):
    rsakey = RSA.importKey(key)
    return (PKCS1_OAEP.new(rsakey), rsakey.size_in_bytes())

# def generate():
#     new_key = RSA.generate(2048)
#     private_key = new_key.exportKey()
#     public_key = new_key.publickey().exportKey()
#     with open('key.priv', 'wb') as f:
#         f.write(private_key)
#     with open('key.pub', 'wb') as f:
#         f.write(public_key)

def main():
    #generate()
    print("key_priv : " +str(get_rsa_cipher(key_priv)))
    print("key_pub : " + str(get_rsa_cipher(key_pub)))
    print()

    plaintext = b'This is a Secret !!!'
    print("plaintext size : "+ str(getsizeof(plaintext)))

    print()
    ciphertext = encrypt(plaintext)
    print("ciphertext size - " + str(getsizeof(ciphertext)))
    print("ciphertext :: " + str(ciphertext))

    secret = decrypt(ciphertext)
    print("\nsecret :: " + str(secret))

if __name__ == '__main__':
    key_priv = '''-----BEGIN RSA PRIVATE KEY-----
MIIEpAIBAAKCAQEAw5FTA/K/WsKN3D3mRbJHvhRVZOVYKLWe9j5pPleQYNxwPIi4
KfOhZ9skjejhqVEfnOT2eg6Vu675c9zr8uv6h5H19iVtF7fDjAKibOvY4oDOfHgO
uwtKLVsLGvwhBzhPO1yvUTaPnjG6XMFIdWcZ5j7Owu4Ya25uJBnirJ4NswqJn0JT
xhx3kUiRaqr3Wt9HoN0BUGHJG6LqdvexdRi/t49GbZYPu688326qDxXUPK6gkZjN
7lDHpyk6BmFjhQlf1HbpnmWqKEN0t6p4ih94b17AKdv4Pgnw4MBqRDIytQfSxRKM
LJ986LFMsRa4lD0IJYosqev0h4ykoPBgqqNFlwIDAQABAoIBABbFgiQQjOV1h+0g
LALril0AoxzXc5dx5muHwttmeMI+iLcTuFXyL1YXdz8q4bPEZWjwZB68OgUbj6JF
FBg6D/bfMQOTQguj8xoHaIBESgG9u81UcWqoGuADHNzshLABh4BC/4r2Tmy+H5QT
UWuSMLrVj1+1N5SyzBJaDUHKOZAiMpAQoHVYwE9SWgR9UVCw2QotmSNoyIVYO5KS
rDgRSEiiY46zgF+jJKnkZSN9J+F+b0zkbTkjged4gQ72HNUi2RWhVpUnZW0wQ1kc
TYumX8ONv1jIt9mB82zN75uoUSL5YbUfgmHep6Q2KefQ2WweIzDeMMV0oXs9ZjYv
+EvWLxECgYEAyMDS84WJ2sTRKtP/UjtiEV/ZSr7TCmstpcXAONY79VgyjBHFc4ie
qAWmMnXZ051TYX7aiU81ZG4AUf/Ahc4sq8rNdlXwbvZEy45zKHswEZexrltsPjyH
F4aWM3iP+GZi0D9MX0vIHnH7aOUqF/UCXJOfuteMWqXCjNbwHzQDaokCgYEA+WMs
99qMUS4zheTB7VEREHH45nlWykrZ8l+fCfTccXmKR2OHX6zkOMMRzPsD3YKYgsLG
hE8bBGK2FujVI8lS6rQz3BGKpgYopONQpwxaznkFkiQMEdNKH2hGtylM7HewbThF
vS+1vMUVbccRdFcvJzEea+3nABrsstvgKw9qpx8CgYBCcaegWBNvZ/L+5Nm9os/r
hjjKB2ycJysdkdz0Mtv3cTCRsZQTkCVK4UvHqb/lzU16mFzGU4QNcGcEvMxAvSOF
3IKyZvFEGJhecxBkVplrSTTSy4mA89GWlMID2SR1h5Wu7TRe2hsrEHiwmCCde0dD
0sxsL8lRe0lwCffBrBpxWQKBgQCtyp5gz02vmRnQuh0m67KPmk1RF8gSy1zc2iQz
xQ8GiSODImoJk6urns094sPLzyHHJkM/mv0B7mRkzLcT7E27P/9P4m2Ty4Dxf3QK
JcL2VkI6mKJMncju4DU/mSmBNNufEXMQJzpoJZQMX4jbYZJ7pnBD2JN9cEX5Ut8C
QwkZEwKBgQCyHCbUkWqblKG0/kTQy9VISojQxAyJRI4IPAIE/tA/bdRBdcxJ9krm
o6zDDNPJ7gXAIXd/5+wFgi397Z7AxAXqtLAGVQI8rax1X0gHsRhY95rOtrvhnewI
5uq476Aawet37DIS4O9M4foyPGH/1kvF7OrIxIFXK/EXh2geiuikpw==
-----END RSA PRIVATE KEY-----'''
    key_pub = '''-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAw5FTA/K/WsKN3D3mRbJH
vhRVZOVYKLWe9j5pPleQYNxwPIi4KfOhZ9skjejhqVEfnOT2eg6Vu675c9zr8uv6
h5H19iVtF7fDjAKibOvY4oDOfHgOuwtKLVsLGvwhBzhPO1yvUTaPnjG6XMFIdWcZ
5j7Owu4Ya25uJBnirJ4NswqJn0JTxhx3kUiRaqr3Wt9HoN0BUGHJG6LqdvexdRi/
t49GbZYPu688326qDxXUPK6gkZjN7lDHpyk6BmFjhQlf1HbpnmWqKEN0t6p4ih94
b17AKdv4Pgnw4MBqRDIytQfSxRKMLJ986LFMsRa4lD0IJYosqev0h4ykoPBgqqNF
lwIDAQAB
-----END PUBLIC KEY-----
    '''
    main()